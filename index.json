[{"categories":["面试技巧"],"content":"异常基本类型 异常类的基本类型是Throwable类 两大子类分别是Error和Exception ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/:1:0","tags":["面试"],"title":"Java异常","uri":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/"},{"categories":["面试技巧"],"content":"Error 系统错误由Java虚拟机抛出，用Error类表示。Error类描述的是内部系统错误 例如：Java虚拟机崩溃。在程序中不会对Error异常进行捕捉和抛出。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/:1:1","tags":["面试"],"title":"Java异常","uri":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/"},{"categories":["面试技巧"],"content":"Exception 异常Exception又分为RuntimeException(运行时异常)和CheckedException(检查时异常) RuntimeException(运行时异常) 程序运行过程中才可能发生的异常,一般为代码的逻辑错误 例如：类型错误转换，空指针异常、找不到指定类等 CheckedException(检查时异常) 编译期间可以检查到的异常，必须显式的进行处理（捕获或者抛出到上一层） 例如：IOException, FileNotFoundException,SQLException等 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/:1:2","tags":["面试"],"title":"Java异常","uri":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/"},{"categories":["面试技巧"],"content":"异常处理 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/:2:0","tags":["面试"],"title":"Java异常","uri":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/"},{"categories":["面试技巧"],"content":"throws（声明异常） 在方法头中显式声明该异常，以便于告知方法调用者此方法有异常 若父类的方法没有声明异常，则子类继承方法后，也不能声明异常 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/:2:1","tags":["面试"],"title":"Java异常","uri":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/"},{"categories":["面试技巧"],"content":"try-catch（捕获异常） 若执行try块的过程中没有发生异常，则跳过catch子句 若是出现异常，try块中剩余语句不再执行。 再判断catch块的异常类是否是捕获的异常类型，匹配后执行相应的catch块中的代码。 如果有finally的话进入到finally里面继续执行。 try ctach fianally中有return时，会先执行return,但是不会返回。在执行完finally后进行返回 catch语句可以有一个或多个，finally语句最多一个 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/:2:2","tags":["面试"],"title":"Java异常","uri":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/"},{"categories":["面试技巧"],"content":"throw,throws关键字区别 throw关键字是用于方法体内部，用来抛出一个Throwable类型的异常 throws关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常 public static void test()throws Exception{ throw new Exception(\"方法test中的Exception\"); } ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/:3:0","tags":["面试"],"title":"Java异常","uri":"https://hahaen.github.io/java%E5%BC%82%E5%B8%B8/"},{"categories":["面试技巧"],"content":" override是重写,重写是一种动态绑定的多态机制。 overload是重载，重载是一种参数多态机制，即代码通过参数的类型或个数不同而实现的多态机制。 @Override是伪代码,表示重写(当然不写也可以)，不过写上有如下好处: 可以当注释用,方便阅读； 编译器可以给你验证@Override下面的方法名是否是你父类中所有的，如果没有则报错。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/override%E5%92%8Coverload%E7%9A%84%E4%BD%9C%E7%94%A8/:0:0","tags":["面试"],"title":"@Override和@overload的作用？","uri":"https://hahaen.github.io/override%E5%92%8Coverload%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["面试技巧"],"content":"在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。 修饰类 当用final修饰一个类时，表明这个类不能被继承。 修饰方法 如果只有在想明确禁止,该方法在子类中被覆盖的情况下才将方法设置为final的。 即父类的final方法是不能被子类所覆盖的，也就是说子类是不能够存在和父类一模一样的方法的。 修饰变量 final成员变量表示常量，只能被赋值一次，赋值后值不再改变。 当final修饰一个基本数据类型时，表示该基本数据类型的值一旦在初始化后便不能发生变化； 如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化的。 final修饰一个成员变量（属性），必须要显示初始化。 当函数的参数类型声明为final时，说明该参数是只读型的。即你可以读取使用该参数，但是无法改变该参数的值。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/final%E7%9A%84%E4%BD%9C%E7%94%A8/:0:0","tags":["面试"],"title":"Final的作用？","uri":"https://hahaen.github.io/final%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["面试技巧"],"content":" 如果预计要创建组件的多个版本，则创建抽象类。抽象类提供简单的方法来控制组件版本； 如果创建的功能将在大范围的全异对象间使用，则使用接口。如果要设计小而简练的功能块，则使用接口； 如果要设计大的功能单元，则使用抽象类。如果要在组件的所有实现间提供通用的已实现功能，则使用抽象类； 抽象类主要用于关系密切的对象；而接口适合为不相关的类提供通用功能。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%88%96%E6%8A%BD%E8%B1%A1%E7%B1%BB/:0:0","tags":["面试"],"title":"什么时候用接口或抽象类？","uri":"https://hahaen.github.io/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%88%96%E6%8A%BD%E8%B1%A1%E7%B1%BB/"},{"categories":["面试技巧"],"content":" Interface(接口):定义功能，只能包含方法(实现),不能包含成员变量，可以被实现若干次。 Abstract class(抽象类):定义抽象的骨架实现，可以包含抽象方法或者实现，也可以包含成员变量，只能沿着一条路径继承。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%ABor%E8%81%94%E7%B3%BB/:0:0","tags":["面试"],"title":"接口和抽象类有什么区别or联系？","uri":"https://hahaen.github.io/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%ABor%E8%81%94%E7%B3%BB/"},{"categories":["面试技巧"],"content":" 浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。 简而言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。 深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。 简而言之，深拷贝把要复制的对象所引用的对象都复制了一遍。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/:0:0","tags":["面试"],"title":"深拷贝、浅拷贝的区别？","uri":"https://hahaen.github.io/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"categories":["面试技巧"],"content":" 对象类型不同 equals()：是超类Object中的方法。 ==：是操作符。 比较的对象不同 equals()：用来检测两个对象是否相等，即两个对象的内容是否相等。 ==：用于比较引用和比较基本数据类型时具有不同的功能 运行速度不同 equals()：没有==运行速度快。 ==：运行速度比equals()快，因为==只是比较引用。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/equals%E5%8C%BA%E5%88%AB/:0:0","tags":["面试"],"title":"==、Equals区别？","uri":"https://hahaen.github.io/equals%E5%8C%BA%E5%88%AB/"},{"categories":["面试技巧"],"content":"常用方法： indexOf() 返回指定字符的索引。 charAt() 返回指定索引处的字符。 replace() 字符串替换。 trim() 去除字符串两端空白。 split() 分割字符串，返回一个分割后的字符串数组。 getBytes() 返回字符串的 byte 类型数组。 length() 返回字符串长度。 toLowerCase() 将字符串转成小写字母。 toUpperCase() 将字符串转成大写字符。 substring() 截取字符串。 equals() 字符串比较。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/string%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95/:0:0","tags":["面试"],"title":"String中有哪些方法？","uri":"https://hahaen.github.io/string%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95/"},{"categories":["面试技巧"],"content":" Object类，属于java.lang包，位于类层次结构树的顶部。 每个类都是Object类的直接或间接的后代。 使用或编写的每个类都继承Object的实例方法。 常用方法： getClass 方法 final 方法、获取对象的运行时 class 对象，class 对象就是描述对象所属类的对象。 hashCode 方法 该方法主要用于获取对象的散列值。Object 中该方法默认返回的是对象的堆内存地址。 equals 方法 该方法用于比较两个对象，如果这两个对象引用指向的是同一个对象，那么返回 true，否则返回 false。 clone 方法 该方法是保护方法，实现对象的浅复制，只有实现了 Cloneable 接口才可以调用该方法，否则抛出 CloneNotSupportedException 异常。 toString 方法 返回一个 String 对象，一般子类都有覆盖。默认返回格式如下：对象的 class 名称 + @ + hashCode 的十六进制字符串。 wait 方法 当timeout 为 0，即不等待。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/object%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95/:0:0","tags":["面试"],"title":"Object有哪些方法？","uri":"https://hahaen.github.io/object%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95/"},{"categories":["面试技巧"],"content":"区别 StringBuffer更快，但线程不安全，常用 StringBuilder稍慢，但线程安全 ","date":"2022-03-10","objectID":"https://hahaen.github.io/stringbufferstringbuilder%E5%8C%BA%E5%88%AB/:0:1","tags":["面试"],"title":"StringBuffer、StringBuilder区别","uri":"https://hahaen.github.io/stringbufferstringbuilder%E5%8C%BA%E5%88%AB/"},{"categories":["面试技巧"],"content":"线程安全性 如果没有额外声明，所有类的默认都是线程不安全的 ","date":"2022-03-10","objectID":"https://hahaen.github.io/stringbufferstringbuilder%E5%8C%BA%E5%88%AB/:0:2","tags":["面试"],"title":"StringBuffer、StringBuilder区别","uri":"https://hahaen.github.io/stringbufferstringbuilder%E5%8C%BA%E5%88%AB/"},{"categories":["面试技巧"],"content":" Java世界中的一切对象都是指针(地址) 函数调用永远是传值 基本类型（包括String类）作为参数传递时，是传递值的拷贝，无论你怎么改变这个拷贝，原值是不会改变的 引用类型（包括数组，对象以及接口）作为参数传递时，是把对象在内存中的地址拷贝了一份传给了参数。 注意：基本数据类型的封装类Integer、Short、Float、Double、Long、Boolean、Byte、Character虽然是引用类型，但它们在作为参数传递时，也和基本数据类型一样，是值传递。 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%98%AF%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/:0:0","tags":["面试"],"title":"Java的参数传递是传值还是传引用？","uri":"https://hahaen.github.io/java%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%98%AF%E4%BC%A0%E5%80%BC%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/"},{"categories":["面试技巧"],"content":"基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型： 整数类型：byte，short，int，long 浮点数类型：float，double 字符类型：char 布尔类型：boolean String是基本数据类型吗？答：不是 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/:0:0","tags":["面试"],"title":"Java的基本类型","uri":"https://hahaen.github.io/java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"},{"categories":["面试技巧"],"content":"JDK=JRE+javac javac 相当于 编译compler jdk java开发工具包,java语言编写的程序所需的开发工具包 jre java运行时环境,即java程序的运行时环境，包含了java虚拟机，java基础类库 jdk包含jre,jre是java运行时环境，另外jdk包含开发时所需要的sdk和编译器javac和javadoc工具 ","date":"2022-03-10","objectID":"https://hahaen.github.io/jdkjre%E5%8C%BA%E5%88%AB/:0:0","tags":["面试"],"title":"JDK、JRE区别","uri":"https://hahaen.github.io/jdkjre%E5%8C%BA%E5%88%AB/"},{"categories":["面试技巧"],"content":".java — 编译(compler) — 字节码(.class) — JVM .class 打包成 .jar JVM解析字节码 使用文字编辑软件或集成开发环境编辑 Java 源文件，扩展名为 .java 通过编译 .java 文件，生成同名的 .class 字节码文件 通过 JVM 解释方式，将 .class 字节码文件转变为由 0 或 1 组成的二进制指令（机器码）运行 ","date":"2022-03-10","objectID":"https://hahaen.github.io/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/:0:0","tags":["面试"],"title":"Java程序的运行原理","uri":"https://hahaen.github.io/java%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"生命周期(lifecycle) default生命周期处理项目部署 clean生命周期处理项目清理 site生命周期处理项目站点文档的创建 ","date":"2021-11-21","objectID":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/:1:0","tags":["java"],"title":"Maven构建","uri":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/"},{"categories":["java知识"],"content":"阶段(phase) 每个构建生命周期都由不同的构建阶段列表定义，其中构建阶段表示生命周期中的一个阶段。 例如，default生命周期包括以下阶段： validate - 验证项目是否正确，并提供所有必要的信息 compile - 编译项目源代码 test - 使用合适的单元测试框架测试编译后的源代码。这些测试不需要打包或部署代码 package - 将编译后的代码以其可分发的格式打包，例如JAR verify - 对集成测试的结果进行检查，以确保满足质量标准 install -将包安装到本地存储库中，作为本地其他项目中的依赖项使用 deploy - 在集成或发布环境中操作，将最终包复制到远程存储库，以便与其他开发人员和项目共享 这些生命周期阶段(加上这里没有显示的其他生命周期阶段)按顺序执行，以完成default生命周期。 鉴于上面的生命周期阶段，这意味着当使用default生命周期时。 Maven将首先验证项目，然后将视图编译源代码， 运行测试，打包二进制文件(如jar)， 运行集成测试方案，验证集成测试， 安装验证过的包到本地存储库，然后将安装包部署到远程存储库。 ","date":"2021-11-21","objectID":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/:2:0","tags":["java"],"title":"Maven构建","uri":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/"},{"categories":["java知识"],"content":"插件(plugin)的目标(goal) Maven的操作是基于不同的插件的不同目标来实现的 例 mvn clean 使用的参数是clean阶段，而实际执行的是maven-clean-plugin插件的clean目标。 常用的插件 插件 maven-clean-plugin maven-resouces-plugin maven-compiler-plugin maven-deploy-plugin maven-surefire-plugin maven-install-plugin 直接运行插件 可使用插件名:目标名的参数形式直接运行某插件的某目标。 例如： mvn dependency:copy-dependencies 以上命令执行了dependency插件的copy-dependencies目标。 阶段(phase)和插件目标(goal)可以同时使用 例如： mvn clean dependency:copy-dependencies package 执行了clean周期的pre-clean和clean阶段， dependency插件的copy-dependencies目标， default周期package阶段及package之前的所有阶段。 ","date":"2021-11-21","objectID":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/:3:0","tags":["java"],"title":"Maven构建","uri":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/"},{"categories":["java知识"],"content":"绑定的整个工作原理 官方文档 groupId：组织标识名（简单理解成 包名） artifactId：项目名称 version：项目的当前版本 packaging：项目的打包方式，最为常见的jar和war两种（项目中继承的话，为pom） classifier: 该元素用来帮助定义构建输出的一些附属构件（不能被直接定义） 依赖性管理，在pom.xml文件中\u003cdependency\u003e\u003c/dependency\u003e中 ","date":"2021-11-21","objectID":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/:4:0","tags":["java"],"title":"Maven构建","uri":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/"},{"categories":["java知识"],"content":"依赖传递 若A依赖B，B依赖C，则A也依赖于C（A对于C为间接依赖） ","date":"2021-11-21","objectID":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/:4:1","tags":["java"],"title":"Maven构建","uri":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/"},{"categories":["java知识"],"content":"仓库管理 仓库用来统一存储所有Maven共享构建的位置， 根据maven坐标，目录方式：groupId/artifactId/version/artifactId-version.packaging 就可以唯一确定一个构建。 每个用户只有一个本地仓库，默认是在${user.home}/.m2/repository/，${user.home}代表的是用户目录 Maven默认的远程仓库：URL：http://search.maven.org/，我们需要引用外部的包时，可以从上面查到相关的GroupId、版本号等信息 私服：是一种特殊的远程仓库，架设在局域网内的仓库（一般公司内部都会有一个自己的私服） ","date":"2021-11-21","objectID":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/:4:2","tags":["java"],"title":"Maven构建","uri":"https://hahaen.github.io/maven%E6%9E%84%E5%BB%BA/"},{"categories":["各种问题"],"content":"题目地址 ","date":"2021-11-09","objectID":"https://hahaen.github.io/docker%E6%8C%82%E8%BD%BD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:0:0","tags":["问题"],"title":"Docker挂载问题解决","uri":"https://hahaen.github.io/docker%E6%8C%82%E8%BD%BD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["各种问题"],"content":"docker desktop win10挂载问题解决 系统：win10 docker pull blindpirate/hcsp-quiz 尝试自己编写一个docker run命令，完成以下要求： 使用交互式命令行模式(-it)启动Docker容器。 向启动的Docker容器内挂载一个文件（卷），使得容器内能够读取到/app/config.txt文件，其内容为字符串\"ABC\"。 向启动的Docker容器内传递一个环境变量HCSP_ENV=DEF。 为启动的Docker容器设置要执行的命令：java Main。 如果一切正确，命令行会输出： 答案是: XXXXX The answer is: XXXXXXX 提示未winpty docker run -e HCSP_ENV=DEF -itv //e/xiedaimala/practise-docker-run/config.txt:/app/config.txt blindpirate/hcsp-quiz 未挂载 winpty docker run -e HCSP_ENV=DEF -itv /e/xiedaimala/practise-docker-run/config.txt:/app/config.txt blindpirate/hcsp-quiz 成功 winpty docker run -e HCSP_ENV=DEF -itv //e/xiedaimala/practise-docker-run/config.txt:/app/config.txt blindpirate/hcsp-quiz ","date":"2021-11-09","objectID":"https://hahaen.github.io/docker%E6%8C%82%E8%BD%BD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/:1:0","tags":["问题"],"title":"Docker挂载问题解决","uri":"https://hahaen.github.io/docker%E6%8C%82%E8%BD%BD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"categories":["各种问题"],"content":"idea版本2021.2.1 ","date":"2021-11-02","objectID":"https://hahaen.github.io/idea%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/:0:0","tags":["问题"],"title":"Idea个人使用问题解决办法","uri":"https://hahaen.github.io/idea%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"categories":["各种问题"],"content":"连接mysql报错 删除这三个就测试成功 ","date":"2021-11-02","objectID":"https://hahaen.github.io/idea%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/:1:0","tags":["问题"],"title":"Idea个人使用问题解决办法","uri":"https://hahaen.github.io/idea%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"categories":["各种问题"],"content":"例： docker run --name mymysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:5.7.27 docker run --name=mediawiki_mysql \\ -e MYSQL_DATABASE=wikidb \\ -e MYSQL_USER=wikiuser \\ -e MYSQL_PASSWORD=mysecret \\ -e MYSQL_ROOT_PASSWORD=zhang123 \\ -v /var/mediawiki/mysql:/var/lib/mysql \\ -d mysql:5.7.27 上面命令中的 \\ 是换行 -d 是指定镜像，本地没有的话会从docker服务器下载 -p 映射容器的3306到本地3306，前面是本地端口，-p 3306:3306 这里已经设置了一组管理数据库的用户名:wikiuser 密码:mysecret 通常使用-e MYSQL_RANDOM_ROOT_PASSWORD=1 把root设置为随机，只使用wikiuser用户来管理 -v 是映射本地目录到容器，目录需要提前创建，或者sudo chmod 777 /var/mediawiki，启动容器会自己创建mysql目录 进入容器： docker exec -it [容器名或容器ID] bash ","date":"2021-11-02","objectID":"https://hahaen.github.io/docker-run-mysql%E6%98%A0%E5%B0%84/:0:0","tags":["问题"],"title":"Docker Run Mysql映射","uri":"https://hahaen.github.io/docker-run-mysql%E6%98%A0%E5%B0%84/"},{"categories":["java知识"],"content":"正则表达式在线测试 ","date":"2021-11-02","objectID":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","tags":["java"],"title":"正则表达式","uri":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["java知识"],"content":"基本用法 常用的元字符 ^ 开始位置 $ 结束位置 . 单个任意字符（不⼀一定包含换⾏行行符 \\w 单个“word”字符字母/数字/下划线/汉字 \\s 单个空白字符（\\n\\r\\t） \\d 单个数字字符 \\b 单词的开始或结束 重复 * 0次或多次 + 1次或多次 ？ 0次或1次 {n} n次 {n,} \u003e=n次 {n,m} n到m次 选择 [aeiou] 单个的a/e/i/o/u字符之⼀一 [0-9] 单个数字字符 [A-Z] 单个大写字母 [A-Z0-9] 大写字母或者数字或者下划线 Hi|hi 等价于 [Hh]i Hi或者hi 反义 [^aeiou] 单个的除a/e/i/o/u之外的字符 [^A] 单个非x字符 \\W 单个非\\w（字⺟母/数字/下划线/汉字） \\S 单个非\\s（空白) \\D 单个非\\d（数字）字符 \\B 非开头/结束位置 ","date":"2021-11-02","objectID":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:1","tags":["java"],"title":"正则表达式","uri":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["java知识"],"content":"Java中的正则表达式 String split() replaceAll/replaceFirst matches 效率低 尽量少用、少编译 ","date":"2021-11-02","objectID":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:2","tags":["java"],"title":"正则表达式","uri":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["java知识"],"content":"分组与捕获 左括号( –开始数 ","date":"2021-11-02","objectID":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:3","tags":["java"],"title":"正则表达式","uri":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["java知识"],"content":"Java中处理捕获 ","date":"2021-11-02","objectID":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:4","tags":["java"],"title":"正则表达式","uri":"https://hahaen.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"categories":["html"],"content":"URL 英文：Uniform Resource Locator https://zh.wikipedia.org:443/w/index.php?title=随机页面 https，是协议； zh.wikipedia.org，是服务器； 443，是服务器上的网络端口号； /w/index.php，是路径； ?title=Special:随机页面，是询问。 ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:1:0","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"DNS 英文：Domain Name System ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:2:0","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"作用： 根据域名查出IP地址 ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:2:1","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"nslookup 命令 用于互动式地查询域名记录 进入交互模式，总共有两种方法。 第一种方法，直接输入 nslookup 命令，不加任何参数，则直接进入交互模式，此时 nslookup 会连接到默认的域名服务器（即 /etc/resolv.conf 的第一个 dns 地址）。 第二种方法，是支持选定不同域名服务器的。需要设置第一个参数为“-”，然后第二个参数是设置要连接的域名服务器主机名或 IP 地址。 如果你直接在 nslookup 命令后加上所要查询的 IP 或主机名，那么就进入了非交互模式。当然，也可以在第二个参数位置设置所要连接的域名服务器。 例子 交互模式下查询域名 nslookup \u003e www.douban.com Server: 127.0.1.1 // 往上连接的 DNS 服务器 Address: 127.0.1.1#53 // DNS 服务器 IP 地址与端口 Non-authoritative answer: // 非权威答案，从上连 DNS 服务器本地缓存中读取，非实际查询得到 Name: www.douban.com Address: 115.182.201.6 // IP 地址 Name: www.douban.com Address: 115.182.201.7 Name: www.douban.com Address: 115.182.201.8 交互模式下更改 DNS 进入交互模式之后，使用 server dns-server 来改变上连 DNS 服务器地址 查询域名 ip 地址 nslookup www.douban.com [dns-server] //如果没有指定 dns-server，使用系统默认的 DNS 服务器。 ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:2:2","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"IP ip138-查询本机ip ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:3:0","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"IP地址： 互联网协议地址 IP地址是人们在Internet上为了区分数以亿计的主机而给每台主机分配的一个专门的地址，通过IP地址就可以访问到每一台主机。 ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:3:1","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"ping 命令 Ping 命令详解 输入ping /? ，列出ping的相关参数 用法: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS] [-r count] [-s count] [[-j host-list] | [-k host-list]] [-w timeout] [-R] [-S srcaddr] [-c compartment] [-p] [-4] [-6] target_name -t ：Ping 指定的计算机直到中断。 -a ：将地址解析为计算机名。 -n count ：发送 count 指定的 ECHO 数据包数。默认值为 4。 -l size ：发送包含由 size 指定的数据量的 ECHO 数据包。默认为 32 字节；最大值是65,527。 -f ：在数据包中发送\"不要分段\"标志。数据包就不会被路由上的网关分段。 -i ttl :将\"生存时间\"字段设置为 ttl 指定的值。 -v tos :将\"服务类型\"字段设置为 tos 指定的值。 -r count :在\"记录路由\"字段中记录传出和返回数据包的路由。count 可以指定最少 1 台，最多 9 台计算机。 -s count :指定 count 指定的跃点数的时间戳。 -j host-list :利用 host-list 指定的计算机列表路由数据包。连续计算机可以被中间网关分隔（路由稀疏源）IP 允许的最大数量为 9。 -k host-list :利用 host-list 指定的计算机列表路由数据包。连续计算机不能被中间网关分隔（路由严格源）IP 允许的最大数量为 9。 -w timeout :指定超时间隔，单位为毫秒。 destination-list :指定要 ping 的远程计算机。 ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:3:2","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"域名 域名-维基百科 域名是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。 www.xiedaimala.com和xiedaimala.com 不是同一域名 com是顶级域名 xiedaimala.com是二级域名(俗称一级域名) www.xiedaimala.com是三级域名(俗称二级) 上面的两是父子关系 例如 github. io把子域名 XXX.github.io免费给你使用 所以www.xiedaimala.com和xiedaimala. com可以不是同一家公司,也可以是 www是多余的,非常多余。 ","date":"2021-10-29","objectID":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/:4:0","tags":["HTML"],"title":"浅析URL","uri":"https://hahaen.github.io/%E6%B5%85%E6%9E%90url/"},{"categories":["html"],"content":"搜索技巧： 谷歌搜索 mdn + xx(标签) ","date":"2021-10-28","objectID":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/:1:0","tags":["HTML"],"title":"HTML常用标签","uri":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"},{"categories":["html"],"content":"a 标签的用法 ","date":"2021-10-28","objectID":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/:2:0","tags":["HTML"],"title":"HTML常用标签","uri":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"},{"categories":["html"],"content":"href \u003cul\u003e \u003cli\u003e\u003ca href=\"http://baidu.com\"\u003e百度\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://baidu.com\"\u003e百度\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"//baidu.com\"\u003e百度\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/a/b/index.html\"\u003e/a/b/index.html页面\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"./index.html\"\u003eindex.html页面\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"123456789@163.com\"\u003eEmail\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"123456789\"\u003ePhone\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e 注意: 可以使用 href=\"#top\" 或者 href=\"#\" 链接返回到页面顶部。 ","date":"2021-10-28","objectID":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/:2:1","tags":["HTML"],"title":"HTML常用标签","uri":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"},{"categories":["html"],"content":"target _self: 当前页面加载。此值是默认的，如果没有指定属性的话。 _blank: 新窗口打开。 _parent: 加载响应到当前的浏览上下文的父浏览上下文。如果没有parent框架或者浏览上下文，此选项的行为方式与 _self 相同。 _top: IHTML4中：加载的响应成完整的，原来的窗口，取消所有其它frame。 HTML5中：加载响应进入顶层浏览上下文（即，浏览上下文，它是当前的一个的祖先，并且没有parent）。如果没有parent框架或者浏览上下文，此选项的行为方式相同_self ","date":"2021-10-28","objectID":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/:2:2","tags":["HTML"],"title":"HTML常用标签","uri":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"},{"categories":["html"],"content":"作用 跳转外部页面 跳转内部锚点 跳转到邮箱或电话等 a ","date":"2021-10-28","objectID":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/:2:3","tags":["HTML"],"title":"HTML常用标签","uri":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"},{"categories":["html"],"content":"img 标签的用法 \u003cimg class=\"fit-picture\" src=\"1.jpg\" alt=\"网络错误\"\u003e src 属性是必须的，它包含了你想嵌入的图片的文件路径。 alt 属性包含一条对图像的文本描述，这不是强制性的。如果由于某种原因无法加载图像，普通浏览器也会在页面上显示alt 属性中的备用文本：例如，网络错误、内容被屏蔽或链接过期时。 img ","date":"2021-10-28","objectID":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/:3:0","tags":["HTML"],"title":"HTML常用标签","uri":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"},{"categories":["html"],"content":"table 标签的用法 \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth colspan=\"2\"\u003eThe table header\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003eThe table body\u003c/td\u003e \u003ctd\u003ewith two columns\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e table ","date":"2021-10-28","objectID":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/:4:0","tags":["HTML"],"title":"HTML常用标签","uri":"https://hahaen.github.io/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"},{"categories":["爬虫项目实战"],"content":"Java多线程原理 ","date":"2021-09-28","objectID":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/:1:0","tags":["java"],"title":"Java多线程原理","uri":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/"},{"categories":["爬虫项目实战"],"content":"为什么需要多线程？ 可以提高程序的执行性能 例如：一个人洗菜做法，和多个人一起洗菜做饭效率不一样。 ","date":"2021-09-28","objectID":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/:1:1","tags":["java"],"title":"Java多线程原理","uri":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/"},{"categories":["爬虫项目实战"],"content":"多线程带来了什么问题，如何避免？ 线程安全问题 例如：银行存钱取件需要完整，不可出现错误。 保证线程安全需要满足两大条件： 原子性：一系列操作，要么全部完成，要么全部不完成，不可被分割，不会结束在中间某个环节。 可见性：当一个线程修改了对象状态后，其他线程能够看到发生的状态变化。 上下文切换 线程与 CPU 单核执行是一对一的 CPU 是通过时间片算法来执行任务的，不同的线程活跃状态不同，CPU 会在多个线程间切换执行，在切换时会保存上一个任务的状态，以便下次切换回这个任务时可以再加载到这个任务的状态 线程数越多，带来的上下文切换越严重，上下文切换会带来 CPU 系统态使用率占用 这就是当我们开启大量线程，系统反而更慢 解决办法 减少锁等待 使用合适的线程数 CAS 算法 死锁 线程 A 和线程 B 都拥有一份锁，而线程 A 和线程 B 恰好同时去获取对方拥有的那把锁， 导致两个线程永远无法执行， 要避免死锁有一个方法即获取锁的顺序是固定的， 比如只能先获取锁 X 再获取锁 Y，不允许出现相反的顺序。 ","date":"2021-09-28","objectID":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/:1:2","tags":["java"],"title":"Java多线程原理","uri":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/"},{"categories":["爬虫项目实战"],"content":"线程的属性、状态、生命周期详解 线程可以分为5个状态： New(新建) Runnable（就绪） Running(运行) blocked(被阻塞) Dead(死亡) New(新建) 当创建Thread类的一个实例（对象）时，此线程进入新建状态（未被启动）。 Thread t1=new Thread(); Runnable（就绪） 线程已经被启动，正在等待被分配给CPU时间片， 也就是说此时线程正在就绪队列中排队等候得到CPU资源。 t1.start(); Running(运行) 线程获得CPU资源正在执行任务（run()方法）， 此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入， 线程将一直运行到结束。 blocked(被阻塞) 由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。 正在睡眠：用sleep(long t) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。 正在等待：调用wait()方法。（调用motify()方法回到就绪状态） 被另一个线程所阻塞：调用suspend()方法。（调用resume()方法恢复） Dead(死亡) 当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。 自然终止：正常运行run()方法后终止 异常终止：调用stop()方法让一个线程终止运行 ","date":"2021-09-28","objectID":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/:1:3","tags":["java"],"title":"Java多线程原理","uri":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/"},{"categories":["爬虫项目实战"],"content":"什么是ThreadLocal？ 每个线程自己独有的，不与其它线程共享的变量。 常用的两内部类，四个方法： get()方法是用来获取ThreadLocal在当前线程中保存的变量副本。 set()用来设置当前线程中变量的副本。 remove()用来移除当前线程中变量的副本。 initialValue()是一个protected方法，一般是用来在使用时进行重写的，它是一个延迟加载方法。ThreadLocal没有被当前线程赋值时或当前线程刚调用remove方法后调用get方法，返回此方法值。 ","date":"2021-09-28","objectID":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/:1:4","tags":["java"],"title":"Java多线程原理","uri":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/"},{"categories":["爬虫项目实战"],"content":"为什么需要线程池？ 线程池 在Java 5之后，Java通过Executor来启动线程，比使用Thread的start方法更好， 除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免this逃逸问题。 简单的说就是把线程统一管理。 线程池优势： 降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗； 提高系统响应速度，当有任务到达时，通过复用已存在的线程，无需等待新线程的创建便能立即执行； 方便线程并发数的管控。因为线程若是无限制的创建，可能会导致内存占用过多而产生OOM，并且会造成cpu过度切换（cpu切换线程是有时间成本的（需要保持当前执行线程的现场，并恢复要执行线程的现场））。 提供更强大的功能，延时定时线程池。 Java的4种默认线程池 newSingleThreadExecutor 创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。 newFixeThreadPool 创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。 newCachedThreadPool 创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。 newScheduledThreadPool 创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求 ","date":"2021-09-28","objectID":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/:1:5","tags":["java"],"title":"Java多线程原理","uri":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/"},{"categories":["爬虫项目实战"],"content":"线程池的构造函数中的参数都是什么含义？ ThreadPollExecutor中的所有的构造函数最终都会调用上面这个构造函数，接下来我们来分析一下这些参数的含义： corePoolSize： 线程池启动后，在池中保持的线程的最小数量。 需要说明的是线程数量是逐步到达corePoolSize值的。 例如corePoolSize被设置为10，而任务数量只有5，则线程池中最多会启动5个线程，而不是一次性地启动10个线程。 maxinumPoolSize： 线程池中能容纳的最大线程数量， 如果超出，则使用RejectedExecutionHandler拒绝策略处理。 keepAliveTime： 线程的最大生命周期。这里的生命周期有两个约束条件： 一：该参数针对的是超过corePoolSize数量的线程； 二：处于非运行状态的线程。 例：如果corePoolSize（最小线程数）为10，maxinumPoolSize（最大线程数）为20，而此时线程池中有15个线程在运行，过了一段时间后，其中有3个线程处于等待状态的时间超过keepAliveTime指定的时间，则结束这3个线程，此时线程池中则还有12个线程正在运行。 unit： 这是keepAliveTime的时间单位 可以是纳秒，毫秒，秒，分钟等。 workQueue： 任务队列。 当线程池中的线程都处于运行状态，而此时任务数量继续增加，则需要一个容器来容纳这些任务，这就是任务队列。 这个任务队列是一个阻塞式的单端队列。 newFixedThreadPool和newSingleThreadExector使用的是LinkedBlockingQueue的无界模式。 threadFactory： 定义如何启动一个线程，可以设置线程的名称，并且可以确定是否是后台线程等。 handler： 拒绝任务处理器。 由于超出线程数量和队列容量而对继续增加的任务进行处理的程序。 线程的管理过程： 首先创建一个线程池， 然后根据任务的数量逐步将线程增大到corePoolSize， 如果此时仍有任务增加，则放置到workQueue中，直到workQueue爆满为止， 然后继续增加池中的线程数量（增强处理能力），最终达到maxinumPoolSize。 那如果此时还有任务要增加进来，需要handler来处理， 或者丢弃新任务，或者拒绝新任务，或者挤占已有的任务。 在任务队列和线程池都饱和的情况下，一旦有线程处于等待（任务处理完毕，没有新任务）状态的时间超过keepAliveTime，则该线程终止， 也就是说池中的线程数量会逐渐降低，直至为corePoolSize数量为止。 总结 corePoolSize: 线程池维护线程的最少线程数,也是核心线程数,包括空闲线程 maximumPoolSize: 线程池维护线程的最大线程数 keepAliveTime: 线程池维护线程所允许的空闲时间 unit: 程池维护线程所允许的空闲时间的单位 workQueue: 线程池所使用的缓冲队列 handler: 线程池对拒绝任务的处理策略 ","date":"2021-09-28","objectID":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/:1:6","tags":["java"],"title":"Java多线程原理","uri":"https://hahaen.github.io/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86/"},{"categories":["爬虫项目实战"],"content":"Http方法与状态码 http方法 GET 拿 POST 发送 GET / HTTP/1.1 //GET请求根路径 使用HTTP1.1协议 Host: xiedaimala.com User-Agent: //用户代理（浏览器） 可根据查看相关信息 Http状态码 200请求成功。一般用于GET与POST请求 http猫 ","date":"2021-09-13","objectID":"https://hahaen.github.io/http%E7%9A%84%E5%9F%BA%E7%A1%80/:1:0","tags":["java"],"title":"HTTP的基础","uri":"https://hahaen.github.io/http%E7%9A%84%E5%9F%BA%E7%A1%80/"},{"categories":["爬虫项目实战"],"content":"HTTP的header与body 重要的header Accept Cookie User-Agent //浏览器标识 Referer //上一个页面是什么 Referer: http://idpeng.xyz/ Content-type //下载或者图片 content-type: text/html; charset=utf-8 Set-Cookie //登录后服务器自动设置的cookie http是无状态的 ","date":"2021-09-13","objectID":"https://hahaen.github.io/http%E7%9A%84%E5%9F%BA%E7%A1%80/:2:0","tags":["java"],"title":"HTTP的基础","uri":"https://hahaen.github.io/http%E7%9A%84%E5%9F%BA%E7%A1%80/"},{"categories":["爬虫项目实战"],"content":"计算机网络是如何工作的 在打开网页的时候发生了什么 主机 域名与DNS 端⼝:HTTPS协议的默认端⼝口是443，HTTP协议的默认端⼝口是80 TCP协议 HTTP协议 ","date":"2021-09-11","objectID":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:1:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["爬虫项目实战"],"content":"浏览器是如何工作的 在网络上传输的只是字节流 HTTP协议 HTML JavaScript CSS ","date":"2021-09-11","objectID":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:2:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["爬虫项目实战"],"content":"同步与异步加载 同步加载：同步模式，又称阻塞模式，会阻止浏览器的后续处理，停止了后续的解析，因此停止了后续的文件加载（如图像）、渲染、代码执行。 异步加载：异步加载又叫非阻塞，浏览器在下载执行 js 同时，还会继续进行后续页面的处理。 服务器端一次返回所有的数据 服务器端返回部分数据，使用AJAX异步加载 区别 异步：在异步模式下，当我们使用AJAX发送完请求后，可能还有代码需要执行。这个时候可能由于种种原因导致服务器还没有响应我们的请求，但是因为我们采用了异步执行方式，所有包含AJAX请求代码的函数中的剩余代码将继续执行。如果我们是将请求结果交由另外一个JS函数去处理的，那么，这个时候就好比两条线程同时执行一样。 同步：在同步模式下，当我们使用AJAX发送完请求后，后续还有代码需要执行，我们同样将服务器响应交由另一个JS函数去处理，但是这时的代码执行情况是：在服务器没有响应或者处理响应结果的JS函数还没有处理完成return时，包含请求代码的函数的剩余代码是不能够执行的。就好比单线程一样，请求发出后就进入阻塞状态，知道接触阻塞余下的代码才会继续执行。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:3:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["爬虫项目实战"],"content":"注意 只要浏览器能做到的 其他代码一定能做到 ","date":"2021-09-11","objectID":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:4:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://hahaen.github.io/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["java知识"],"content":"Collection体系的常用类及其背后的数据结构 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"C0llection常用类 list 有序可重复，拥有下标,最常用的是 ArrayList，实际就是一个数组 常用类： ArrayList LinkedList set 无序且不可重复的元素集合,没有下标。 HashSet（无序） LinkedHashSet（有序） TreeSet（排序） Collection体系简介图 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:1","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Collection背后的数据结构 ArrayList与LinedList Arraylist：底层使用的是Object 数组。 LinkedList：底层使用的是 双向链表 数据结构。 HashSet、LinkedHashSet与TreeSet HashSet: 底层采用 HashMap 来保存元素，HashMap 使用的是拉链法，也叫作链地址法。 LinkedHashSet：底层是链表+哈希表，链表保证数据存储有序，链表用来记录存储顺序；哈希表保证数据唯一，存储真正的数据 TreeSet：红黑树 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:2","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"ArrayList源码阅读 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"继承结构 ArrayList extends AbstractList AbstractList extends AbstractCollection ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:1","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"构造方法 ArrayList有三个构造方法 无参构造方法 /** * Constructs an empty list with an initial capacity of ten.　默认会给10的大小，所以说一开始arrayList的容量是10. */ //ArrayList中储存数据的其实就是一个数组，这个数组就是elementData，在123行定义的 private transient Object[] elementData; 　public ArrayList() {　super(); //调用父类中的无参构造方法，父类中的是个空的构造方法 this.elementData = EMPTY_ELEMENTDATA; //EMPTY_ELEMENTDATA：是个空的Object[]， 将elementData初始化，elementData也是个Object[]类型。空的Object[]会给默认大小10，等会会解释什么时候赋值的。 } 有参构造方法 /** * Constructs an empty list with the specified initial capacity. * * @param initialCapacity the initial capacity of the list * @throws IllegalArgumentException if the specified initial capacity * is negative */ public ArrayList(int initialCapacity) { super(); //父类中空的构造方法 if (initialCapacity \u003c 0) //判断如果自定义大小的容量小于0，则报下面这个非法数据异常 throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); this.elementData = new Object[initialCapacity]; //将自定义的容量大小当成初始化elementData的大小 } 有参构造方法(不常用) //这个构造方法不常用，举个例子就能明白什么意思 /* Strudent exends Person ArrayList\u003cPerson\u003e、 Person这里就是泛型 我还有一个Collection\u003cStudent\u003e、由于这个Student继承了Person，那么根据这个构造方法，我就可以把这个Collection\u003cStudent\u003e转换为ArrayList\u003cSudent\u003e这就是这个构造方法的作用 */ public ArrayList(Collection\u003c? extends E\u003e c) { elementData = c.toArray(); //转换为数组 size = elementData.length; //数组中的数据个数 // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) //每个集合的toarray()的实现方法不一样，所以需要判断一下，如果不是Object[].class类型，那么久需要使用ArrayList中的方法去改造一下。 elementData = Arrays.copyOf(elementData, size, Object[].class); }　 ###add()方法 add(E) //默认直接在末尾添加元素 add(int，E)//在特定位置添加元素，也就是插入元素 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:2","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"remove()方法 remove(int)//通过删除指定位置上的元素 remove(Object)//这个方法可以看出来，arrayList是可以存放null值得。 clear()//将elementData中每个元素都赋值为null，等待垃圾回收将这个给回收掉，所以叫clear ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:3","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"set()方法 设定指定下标索引的元素值 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:4","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"indexOf()方法 从头开始查找与指定元素相等的元素，注意，是可以查找null元素的，意味着ArrayList中可以存放null元素的。与此函数对应的lastIndexOf，表示从尾部开始查找。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:5","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"get()方法 get函数会检查索引值是否合法（只检查是否大于size，而没有检查是否小于0） ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:6","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"ArrayList是如何扩容的？ 扩容操作 /** * The maximum size of array to allocate. * Some VMs reserve some header words in an array. * Attempts to allocate larger arrays may result in * OutOfMemoryError: Requested array size exceeds VM limit */ private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; /** * Increases the capacity to ensure that it can hold at least the * number of elements specified by the minimum capacity argument. * * @param minCapacity the desired minimum capacity */ private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; // 新容量扩大到原容量的1.5倍 int newCapacity = oldCapacity + (oldCapacity \u003e\u003e 1); if (newCapacity - minCapacity \u003c 0) // 如果新容量还是比所需的最小容量小，则让新容量等于所需的最小容量 newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE \u003e 0) // 如果新容量超过了Integer.MAX_VALUE - 8，继续计算 newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: // 所需的最小容量minCapacity 接近size elementData = Arrays.copyOf(elementData, newCapacity); } 扩容计算，int newCapacity = oldCapacity + (oldCapacity \u003e\u003e 1); oldCapacity 是ArrayList 内部数组长度，oldCapacity » 1 是位运算的右移操作，右移一位相当于除以2，新的容量 newCapacity 为之前容量的1.5倍。 elementData = Arrays.copyOf(elementData, newCapacity); 对 elementData 数组进行扩容。 private static int hugeCapacity(int minCapacity) { if (minCapacity \u003c 0) // overflow throw new OutOfMemoryError(); return (minCapacity \u003e MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; } ArrayList 扩容每次都是原容量的1.5倍吗？ 从源码中可以看出，当使用无参构造方法创建一个 ArrayList 实例，调用 add 方法添加第一个元素的时候，calculateCapacity 方法返回的是默认初始容量 DEFAULT_CAPACITY 大小为10；当使用指定初始容量创建ArrayList 实例，调用 addAll 方法添加多个元素的时候，原容量的1.5倍也无法存放元素的时候，会创建一个更大（不会超过 Integer.MAX_VALUE）的数组来存放元素。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:3:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"HashMap源码阅读 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:4:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"put方法 public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } //第四个参数是，只有当key对应的位置为空的时候，才进行替换，一般设置为false //第五个参数如果是false，表示是在第一次放置+初始化数组容量的时候调用。 final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node\u003cK,V\u003e[] tab; Node\u003cK,V\u003e p; int n, i; //如果table数组为空，则进行第一次resize,扩容到初始容量 if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; //如果key在数组中映射的位置上的元素为空，没有产生哈希冲突，则直接放置 if ((p = tab[i = (n - 1) \u0026 hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node\u003cK,V\u003e e; K k; //如果key值相同，则直接覆盖 if (p.hash == hash \u0026\u0026 ((k = p.key) == key || (key != null \u0026\u0026 key.equals(k)))) e = p; //如果key值不同，则产生了哈希冲突，需要解决冲突 else if (p instanceof TreeNode)//如果当前是个树节点，则需要往树上放置元素 e = ((TreeNode\u003cK,V\u003e)p).putTreeVal(this, tab, hash, key, value); else { //是个链表 for (int binCount = 0; ; ++binCount) { //如果走到链表的末尾，则直接新建一个节点，插入到链表末尾 if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); //判断需不需要进行变形，把链表变成红黑树，提高查找效率 if (binCount \u003e= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } //如果当前的key值和链表上的某个key值相同 if (e.hash == hash \u0026\u0026 ((k = e.key) == key || (key != null \u0026\u0026 key.equals(k)))) break; //指针移动 p = e; } } //如果循环结束后，e不等于null，则e的value值需要被替换成新的value值 if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; //HashMap的这个函数是空的，LinkedHashMap继承HashMap重写了这个方法，用来实现插入有序，或者LRU访问 afterNodeAccess(e); return oldValue; } } //修改数++ ++modCount; //如果当前数组的容量超过了扩容的阈值，则进行扩容 if (++size \u003e threshold) resize(); afterNodeInsertion(evict); return null; } ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:4:1","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"get方法 //根据key值获取 public V get(Object key) { Node\u003cK,V\u003e e; return (e = getNode(hash(key), key)) == null ? null : e.value; } final Node\u003cK,V\u003e getNode(int hash, Object key) { Node\u003cK,V\u003e[] tab; Node\u003cK,V\u003e first, e; int n; K k; //table数组不为空,且length\u003e0，且hash值和数组长度做\u0026运算得到的那个bucket不为空 if ((tab = table) != null \u0026\u0026 (n = tab.length) \u003e 0 \u0026\u0026 (first = tab[(n - 1) \u0026 hash]) != null) { //如果是第一个节点，则直接返回第一个节点 if (first.hash == hash \u0026\u0026 // always check first node ((k = first.key) == key || (key != null \u0026\u0026 key.equals(k)))) return first; //开始找下一个节点 if ((e = first.next) != null) { //如果下一个节点是红黑树节点 if (first instanceof TreeNode) return ((TreeNode\u003cK,V\u003e)first).getTreeNode(hash, key); //则开始在树上找节点 do { //如果是链表节点，一直遍历链表，知道找到。 if (e.hash == hash \u0026\u0026 ((k = e.key) == key || (key != null \u0026\u0026 key.equals(k)))) return e; } while ((e = e.next) != null); } } //否则直接返回空 return null; } ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:4:2","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"HashMap是如何扩容的？ HashMap 中的 resize 方法主要包含两部分逻辑： 初始化数组 table，并设置阈值。 数组容量翻倍，将元素迁移到新数组。 /** * Initializes or doubles table size. If null, allocates in * accord with initial capacity target held in field threshold. * Otherwise, because we are using power-of-two expansion, the * elements from each bin must either stay at same index, or move * with a power of two offset in the new table. * * @return the table */ final Node\u003cK,V\u003e[] resize() { Node\u003cK,V\u003e[] oldTab = table; int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; int newCap, newThr = 0; if (oldCap \u003e 0) { // 第一次进来，table为null，oldCap为0，不会进入这里 if (oldCap \u003e= MAXIMUM_CAPACITY) { // 扩容前的数组大小如果已经达到最大(2^30)了 threshold = Integer.MAX_VALUE; // 取整型最大值(2^31-1)，这样以后就不会扩容了 return oldTab; } else if ((newCap = oldCap \u003c\u003c 1) \u003c MAXIMUM_CAPACITY \u0026\u0026 // oldCap翻倍得到newCap oldCap \u003e= DEFAULT_INITIAL_CAPACITY) newThr = oldThr \u003c\u003c 1; // double threshold } else if (oldThr \u003e 0) // initial capacity was placed in threshold // 第一次进来，如果手动设置了初始容量initialCapacity，这里为true，则将threshold作为初始容量 newCap = oldThr; else { // zero initial threshold signifies using defaults // 如果没有手动设置initialCapacity，则设为默认值16 newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); } if (newThr == 0) { // 第一次进来，这里必为true，重新计算 threshold = capacity * Load factor float ft = (float)newCap * loadFactor; newThr = (newCap \u003c MAXIMUM_CAPACITY \u0026\u0026 ft \u003c (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } threshold = newThr; @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Node\u003cK,V\u003e[] newTab = (Node\u003cK,V\u003e[])new Node[newCap]; table = newTab; if (oldTab != null) { // 对oldTab中所有元素进行rehash。由于每次扩容是2次幂的扩展(指数组长度/桶数量扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置 for (int j = 0; j \u003c oldCap; ++j) { Node\u003cK,V\u003e e; if ((e = oldTab[j]) != null) { // 数组j位置的元素不为空，需要该位置上的所有元素进行rehash oldTab[j] = null; if (e.next == null) // 桶中只有一个元素，则直接rehash newTab[e.hash \u0026 (newCap - 1)] = e; else if (e instanceof TreeNode) // 桶中是树结构 ((TreeNode\u003cK,V\u003e)e).split(this, newTab, j, oldCap); else { // preserve order // 桶中是链表结构（JDK1.7中旧链表迁移新链表的时候，用的是头插法，如果在新表的数组索引位置相同，则链表元素会倒置；但是JDK1.8不会倒置，用的是双指针） Node\u003cK,V\u003e loHead = null, loTail = null; // low位链表，其桶位置不变，head和tail分别代表首尾指针 Node\u003cK,V\u003e hiHead = null, hiTail = null; // high位链表，其桶位于追加后的新数组中 Node\u003cK,V\u003e next; do { next = e.next; if ((e.hash \u0026 oldCap) == 0) { // 是0的话索引没变，是1的话索引变成“原索引+oldCap” if (loTail == null) loHead = e; // 总是指向头结点 else loTail.next = e; // 该操作有可能会改变原链表结构 loTail = e; // 总是指向下一个节点，直到尾节点 } else { if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; } } while ((e = next) != null); if (loTail != null) { loTail.next = null; newTab[j] = loHead; // 原索引 } if (hiTail != null) { hiTail.next = null; newTab[j + oldCap] = hiHead; // 原索引+oldCap } } } } } return newTab; } HashMap 每次扩容都是建立一个新的 table 数组，长度和容量阈值都变为原来的两倍，然后把原数组元素重新映射到新数组上，具体步骤如下： 首先会判断 table 数组长度，如果大于 0 说明已被初始化过，那么按当前 table 数组长度的 2 倍进行扩容，阈值也变为原来的 2 倍 若 table 数组未被初始化过，且 threshold(阈值)大于 0 说明调用了 HashMap(initialCapacity, loadFactor) 构造方法，那么就把数组大小设为 threshold 若 table 数组未被初始化，且 threshold 为 0 说明调用 HashMap() 构造方法，那么就把数组大小设为 16，threshold 设为 16*0.75 接着需要判断如果不是第一次初始化，那么扩容之后，要重新计算键值对的位置，并把它们移动到合适的位置上去，如果节点是红黑树类型的话则需要进行红黑树的拆分 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:5:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"HashMap从Java7到Java8发生了哪些变化？ JDK 7 是先对 size++ 进行检查， 如果超过阈值， 则扩容，最后把节点放入 table。 而 JDK 8 相反，先把节点放入， 放入后的 size 若超出， 则扩容 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:6:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"为什么HashMap不是线程安全的？ JDK1.7 中，由于多线程对HashMap进行扩容，调用了HashMap#transfer()，具体原因：某个线程执行过程中，被挂起，其他线程已经完成数据迁移，等CPU资源释放后被挂起的线程重新执行之前的逻辑，数据已经被改变，造成死循环、数据丢失。 JDK1.8 中，由于多线程对HashMap进行put操作，调用了HashMap#putVal()，具体原因：假设两个线程A、B都在进行put操作，并且hash函数计算出的插入下标是相同的，当线程A执行完第六行代码后由于时间片耗尽导致被挂起，而线程B得到时间片后在该下标处插入了元素，完成了正常的插入，然后线程A获得时间片，由于之前已经进行了hash碰撞的判断，所有此时不会再进行判断，而是直接进行插入，这就导致了线程B插入的数据被线程A覆盖了，从而线程不安全。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:7:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Collection体系简介 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:8:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"list Collection\u003cInteger\u003e c = new LinkedHashSet\u003c\u003e(); // IntegerList List\u003cInteger\u003e list = new ArrayList\u003c\u003e(c); // 等价于 List\u003cInteger\u003e list2 = new ArrayList\u003c\u003e(); list2.addAll(c); // 等价于 List\u003cInteger\u003e list3 = new ArrayList\u003c\u003e(); for (Integer i : c) { list3.add(i); } ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:8:1","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Set 只是简单通过object.contains()判断添加新元素时是否重复，从而实现去重的 Set 是很低效的，这就引出了对象的 hashcode。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:8:2","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Java世界第⼆重要的约定 hashCode: 同⼀个对象必须始终返回相同的 hashCode 两个对象的 equals 返回 true，必须返回相同的 hashCode 两个对象不等，也可能返回相同的 hashCode ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:8:3","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"HashSet HashSet 是无序的，是最常用的 Set 实现。 可以利用 set 为 list 过滤去重： List\u003cInteger\u003e list = new ArrayList\u003c\u003e(); list.add(2); list.add(3); list.add(4); list.add(3); Set\u003cInteger\u003e set = new HashSet\u003c\u003e(list); LinkedHashSet 是有序的，顺序就是插入元素时的顺序。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:8:4","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Collections ⼯具⽅法集合 emptySet(): 等返回⼀一个⽅方便便的空集合 synchronizedCollection: 将⼀一个集合变成线程安全的 unmodifiableCollection: 将⼀一个集合变成不不可变的（也可以使⽤用Guava的Immutable） ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:8:5","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Map 体系 map 是 一个将 keys 映射到 values 的对象，键不能重复，每个键只能映射一个值，值可以重复。 keySet()返回键的集合，因为键不可重复，所以可以返回一个 set； values()返回值的集合，因为值可以重复，所以返回的是 collection。 注意：keySet()和 map背后的 keys 是同一组数据，所以二者的修改会相互影响。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:9:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"HashMap HashMap 是最常用、最高效的 Map 实现。 HashMap 的扩容，思路同样是创建更大的空间，然后把之前的数据 copy 进来。 HashMap 是多线程不安全的，可使用 ConcurrentHashMap。 Java 7 开始会采用代替链表 HashMap 和 HashSet 本质上是同一个东西： HashMap 的 key 集合（set）就是 HashSet，而 HashSet 内部其实就是个 HashMap，毕竟 HashSet 拥有的功能 HashMap 都有。 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:9:1","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"有序集合TreeSet/TreeMap TreeSet 可以排序（默认是自然顺序）。 HashSet、LinkedHashSet 与 TreeSet 对比： public class Main { public static void main(String[] args) { List\u003cInteger\u003e list = Arrays.asList(1000, -13, 0, -41656, 1250, 555); Set set1 = new HashSet\u003c\u003e(list); Set set2= new LinkedHashSet(list); Set set3 = new TreeSet(list); System.out.println(set1); System.out.println(set2); System.out.println(set3); } } [0, 1250, -41656, 1000, 555, -13] [1000, -13, 0, -41656, 1250, 555] [-41656, -13, 0, 555, 1000, 1250] TreeMap 同理 ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:9:2","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Guava 不要重复发明轮⼦子！尽量量使⽤用经过实战检验的类库 Lists/Sets/Maps ImmutableMap/ImmutableSet Multiset/Multimap BiMap ","date":"2021-09-11","objectID":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:10:0","tags":["java"],"title":"Collection体系原理","uri":"https://hahaen.github.io/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"jar jar是将很多类文件打包后的一个压缩包,导入 jar 后,可以直接使用里面的类或调用其中的功能。 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:1:0","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"java包的原理 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:2:0","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"传递性依赖 我们依赖的包还依赖了别的类，这种依赖是具有传递性的。 传递性依赖带来的最大的问题就是： 我们在 -classpath 后会添加项目依赖的各种各样的 jar 包； 如果两个仅仅不同版本的 jar 包被同时写进了 -classpath 参数里面； JVM 在 classpath 中寻找类文件的顺序是从前找到后的，也就是说如果有两个仅仅不同版本的 jar ：demo-1.0.jar 和 demo-2.0.jar ，哪个放在前面哪个就会被使用。 如果 demo-1.0.jar 的顺序在 demo-2.0.jar 之前，就会使用demo-1.0.jar加载的类文件，这样的话高版本的jar就会不生效。 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:2:1","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"maven包的管理 Maven 是一个项目管理工具它包含： 一个项目对象模型 一组标准集合 一个项目生命周期 一个依赖管理系统 用来运行定义在生命周期阶段中插件目标的逻辑 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:3:0","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"maven怎么进行管理 Maven 包管理的做法是：Convention over configuration（约定优于配置原则），体现在 POM。 POM是 Maven 工程的基本工作单元，是一个 XML 文件。 该文件中包含了项目的基本信息，用于描述项目如何构建，声明项目依赖等等。 pom.xml \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ehcsp\u003c/groupId\u003e \u003cartifactId\u003efix-bug-in-integer-equals\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cproperties\u003e \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003c/properties\u003e \u003cprofiles\u003e \u003cprofile\u003e \u003cid\u003ealiyunMavenMirror\u003c/id\u003e \u003cactivation\u003e \u003cactiveByDefault\u003etrue\u003c/activeByDefault\u003e \u003c/activation\u003e \u003cpluginRepositories\u003e \u003cpluginRepository\u003e \u003cid\u003ealimaven\u003c/id\u003e \u003cname\u003ealiyun maven\u003c/name\u003e \u003curl\u003ehttp://maven.aliyun.com/nexus/content/groups/public/\u003c/url\u003e \u003c/pluginRepository\u003e \u003c/pluginRepositories\u003e \u003crepositories\u003e \u003crepository\u003e \u003cid\u003ealimaven\u003c/id\u003e \u003cname\u003ealiyun maven\u003c/name\u003e \u003curl\u003ehttp://maven.aliyun.com/nexus/content/groups/public/\u003c/url\u003e \u003c/repository\u003e \u003c/repositories\u003e \u003c/profile\u003e \u003cprofile\u003e \u003cid\u003emavenCentral\u003c/id\u003e \u003cpluginRepositories\u003e \u003cpluginRepository\u003e \u003cid\u003emavenCentral\u003c/id\u003e \u003cname\u003emavenCentral\u003c/name\u003e \u003curl\u003ehttps://repo.maven.apache.org/maven2\u003c/url\u003e \u003c/pluginRepository\u003e \u003c/pluginRepositories\u003e \u003crepositories\u003e \u003crepository\u003e \u003cid\u003emavenCentral\u003c/id\u003e \u003cname\u003emavenCentral\u003c/name\u003e \u003curl\u003ehttps://repo.maven.apache.org/maven2\u003c/url\u003e \u003c/repository\u003e \u003c/repositories\u003e \u003c/profile\u003e \u003c/profiles\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e \u003cversion\u003e2.22.1\u003c/version\u003e \u003cconfiguration\u003e \u003cargLine\u003e-Dfile.encoding=UTF-8\u003c/argLine\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e 引入第三方包 \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e 里面加入了junit-jupiter-engine的jar 如果在本地仓库没有找到对应的 jar 包，Maven 就会从远程的中央仓库进行下载，然后放到本地仓库中。 Maven 中央仓库位置 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:3:1","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"包冲突及解决办法 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:4:0","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"包冲突 相比于C1来说，C2这个第三方包离项目更接近，因此Maven会自动帮你把C1去除，而保留C2。 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:4:1","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"解决冲突的办法 直接依赖C2 排除C1 通过Maven helper插件来解决包冲突问题 排除 \u003cdependency\u003e \u003cgroupId\u003exxx\u003c/groupId\u003e \u003cartifactId\u003exxx\u003c/artifactId\u003e \u003cversion\u003e1.0.0\u003c/version\u003e \u003cexclusions\u003e \u003cexclusion\u003e \u003cgroupId\u003eyyy\u003c/groupId\u003e \u003cartifactId\u003eyyy\u003c/artifactId\u003e \u003c/exclusion\u003e \u003c/exclusions\u003e \u003c/dependency\u003e 排除了xxx依赖中的后代yyy依赖，也可以解决包冲突的问题 ","date":"2021-09-09","objectID":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/:4:2","tags":["java"],"title":"Maven与包","uri":"https://hahaen.github.io/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"git系列操作 ","date":"2021-09-09","objectID":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"git六行配置 git config --global user.name 你的英文名 git config --global user.email 你的邮箱 git config --global push.default simple git config --global core.quotepath false git config --global core.editor \"code --wait\" git config --global core.autocrlf input 注意： 上面的英文名和邮箱跟 GitHub 没有关系。 可以跟 GitHub 的用户名和邮箱保持一致，也可以不一致。 ","date":"2021-09-09","objectID":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:1:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"新建代码库 # 在当前目录新建一个 Git 代码库 git init # 新建一个目录，将其初始化为 Git 代码库 git init [project-name] # 下载一个项目和它的整个代码历史 git clone [url] ","date":"2021-09-09","objectID":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:2:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"配置文件 # 显示当前的 Git 配置 git config --list # 编辑 Git 配置文件 git config -e [--global] ","date":"2021-09-09","objectID":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:3:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"增加/删除文件 # 添加指定文件到暂存区 git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 git add [dir] # 添加当前目录的所有文件到暂存区 git add . # 删除工作区文件，并且将这次删除放入暂存区 git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 git rm --cached [file] # 改名文件，并且将这个改名放入暂存区 git mv [file-original] [file-renamed] 代码提交 # 提交暂存区到仓库区 git commit -m [message] # 提交暂存区的指定文件到仓库区 git commit [file1] [file2] ... -m [message] # 提交工作区自上次 commit 之后的变化，直接到仓库区 git commit -a # 提交时显示所有 diff 信息(推荐) git commit -v # 使用一次新的 commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息 git commit --amend -m [message] # 重做上一次 commit，并包括指定文件的新变化 git commit --amend ... ","date":"2021-09-09","objectID":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:4:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"分支 # 列出所有本地分支 git branch # 列出所有远程分支 git branch -r # 列出所有本地分支和远程分支 git branch -a # 新建一个分支，但依然停留在当前分支 git branch [branch-name] # 新建一个分支，并切换到该分支 git checkout -b [branch] # 新建一个分支，指向指定 commit git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 git checkout [branch-name] # 建立追踪关系，在现有分支与指定的远程分支之间 git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 git merge [branch] # 选择一个 commit，合并进当前分支 git cherry-pick [commit] # 删除分支 git branch -d [branch-name] # 删除远程分支 git push origin --delete git branch -dr ","date":"2021-09-09","objectID":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:5:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"提交代码 git pull 提交代码到远程仓库 git push -u origin master 提交本地指定分支master代码到远程仓库 ","date":"2021-09-09","objectID":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:6:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://hahaen.github.io/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"ls命令 list 的缩写,可以查看文件权限(包括目录、文件夹、文件权限),查看目录信息。 ls -a 列出目录所有文件，包含以.开始的隐藏文件 ls -A 列出除.及..的其它文件 ls -r 反序排列 ls -t 以文件修改时间排序 ls -S 以文件大小排序 ls -h 以易读大小显示 ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:1:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"cd命令 cd [目录名] 进入目录 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"pwd命令 pwd 查看当前路径 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"mkdik命令 mkdir t 在当前工作目录下创建名为 t的文件夹 mkdir -p /tmp/test/t1/t 在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:4:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"rm命令 rm -i *.log 删除任何 .log 文件，删除前逐一询问确认 rm -rf test 删除 test 子目录及子目录中所有档案删除，并且不用一一确认 rm -- -f* 删除以 -f 开头的文件 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:5:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"mv命令 mv test.log test1.txt 将文件 test.log 重命名为 test1.txt mv llog1.txt log2.txt log3.txt /test3 将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 mv -i log1.txt log2.txt 将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 mv * ../ 移动当前文件夹下的所有文件到上一级目录 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:6:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"cp命令 -i 提示 -r 复制目录及目录内所有项目 -a 复制的文件与原文件时间一样 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:7:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"cat命令 cat filename 一次显示整个文件 cat \u003e filename 从键盘创建一个文件 cat file1 file2 \u003e file 将几个文件合并为一个文件 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:8:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"more 命令 功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:9:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"命令参数： +n 从笫 n 行开始显示 -n 定义屏幕大小为n行 +/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示 -d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能 -l 忽略Ctrl+l（换页）字符 -p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似 -s 把连续的多个空行显示为一行 -u 把文件内容中的下画线去掉 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:9:1","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"常用操作命令 Enter 向下 n 行，需要定义。默认为 1 行 Ctrl+F 向下滚动一屏 空格键 向下滚动一屏 Ctrl+B 返回上一屏 = 输出当前行的行号 :f 输出文件名和当前行的行号 V 调用vi编辑器 !命令 调用Shell，并执行命令 q 退出more ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:9:2","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"which 命令 which 查看可执行文件的位置。 whereis 查看文件的位置。 locate 配合数据库查看文件位置。 find 实际搜寻硬盘查询文件名称。 ","date":"2021-09-09","objectID":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:10:0","tags":["java"],"title":"Linux常用命令行","uri":"https://hahaen.github.io/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}]