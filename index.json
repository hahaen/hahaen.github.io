[{"categories":["爬虫项目实战"],"content":"内容 ","date":"2021-09-13","objectID":"https://idpeng.xyz/java%E7%9A%84io/:0:0","tags":["java"],"title":"Java的IO","uri":"https://idpeng.xyz/java%E7%9A%84io/"},{"categories":["爬虫项目实战"],"content":"Http方法与状态码 http方法 GET 拿 POST 发送 GET / HTTP/1.1 //GET请求根路径 使用HTTP1.1协议 Host: xiedaimala.com User-Agent: //用户代理（浏览器） 可根据查看相关信息 Http状态码 200请求成功。一般用于GET与POST请求 http猫 ","date":"2021-09-13","objectID":"https://idpeng.xyz/http%E7%9A%84%E5%9F%BA%E7%A1%80/:1:0","tags":["java"],"title":"HTTP的基础","uri":"https://idpeng.xyz/http%E7%9A%84%E5%9F%BA%E7%A1%80/"},{"categories":["爬虫项目实战"],"content":"HTTP的header与body 重要的header Accept Cookie User-Agent //浏览器标识 Referer //上一个页面是什么 Referer: http://idpeng.xyz/ Content-type //下载或者图片 content-type: text/html; charset=utf-8 Set-Cookie //登录后服务器自动设置的cookie http是无状态的 ","date":"2021-09-13","objectID":"https://idpeng.xyz/http%E7%9A%84%E5%9F%BA%E7%A1%80/:2:0","tags":["java"],"title":"HTTP的基础","uri":"https://idpeng.xyz/http%E7%9A%84%E5%9F%BA%E7%A1%80/"},{"categories":["爬虫项目实战"],"content":"计算机网络是如何工作的 在打开网页的时候发生了什么 主机 域名与DNS 端⼝:HTTPS协议的默认端⼝口是443，HTTP协议的默认端⼝口是80 TCP协议 HTTP协议 ","date":"2021-09-11","objectID":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:1:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["爬虫项目实战"],"content":"浏览器是如何工作的 在网络上传输的只是字节流 HTTP协议 HTML JavaScript CSS ","date":"2021-09-11","objectID":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:2:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["爬虫项目实战"],"content":"同步与异步加载 同步加载：同步模式，又称阻塞模式，会阻止浏览器的后续处理，停止了后续的解析，因此停止了后续的文件加载（如图像）、渲染、代码执行。 异步加载：异步加载又叫非阻塞，浏览器在下载执行 js 同时，还会继续进行后续页面的处理。 服务器端一次返回所有的数据 服务器端返回部分数据，使用AJAX异步加载 区别 异步：在异步模式下，当我们使用AJAX发送完请求后，可能还有代码需要执行。这个时候可能由于种种原因导致服务器还没有响应我们的请求，但是因为我们采用了异步执行方式，所有包含AJAX请求代码的函数中的剩余代码将继续执行。如果我们是将请求结果交由另外一个JS函数去处理的，那么，这个时候就好比两条线程同时执行一样。 同步：在同步模式下，当我们使用AJAX发送完请求后，后续还有代码需要执行，我们同样将服务器响应交由另一个JS函数去处理，但是这时的代码执行情况是：在服务器没有响应或者处理响应结果的JS函数还没有处理完成return时，包含请求代码的函数的剩余代码是不能够执行的。就好比单线程一样，请求发出后就进入阻塞状态，知道接触阻塞余下的代码才会继续执行。 ","date":"2021-09-11","objectID":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:3:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["爬虫项目实战"],"content":"注意 只要浏览器能做到的 其他代码一定能做到 ","date":"2021-09-11","objectID":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/:4:0","tags":["java"],"title":"JavaWeb前后端架构分析","uri":"https://idpeng.xyz/javaweb%E5%89%8D%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["java知识"],"content":"Collection体系简介 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:0","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"list 有序可重复，最常用的是 ArrayList，实际就是一个数组 Collection\u003cInteger\u003e c = new LinkedHashSet\u003c\u003e(); // IntegerList List\u003cInteger\u003e list = new ArrayList\u003c\u003e(c); // 等价于 List\u003cInteger\u003e list2 = new ArrayList\u003c\u003e(); list2.addAll(c); // 等价于 List\u003cInteger\u003e list3 = new ArrayList\u003c\u003e(); for (Integer i : c) { list3.add(i); } ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:1","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Set 无序且不可重复的元素集合。 只是简单通过object.contains()判断添加新元素时是否重复，从而实现去重的 Set 是很低效的，这就引出了对象的 hashcode。 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:2","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Java世界第⼆重要的约定 hashCode: 同⼀个对象必须始终返回相同的 hashCode 两个对象的 equals 返回 true，必须返回相同的 hashCode 两个对象不等，也可能返回相同的 hashCode ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:3","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"HashSet HashSet 是无序的，是最常用的 Set 实现。 可以利用 set 为 list 过滤去重： List\u003cInteger\u003e list = new ArrayList\u003c\u003e(); list.add(2); list.add(3); list.add(4); list.add(3); Set\u003cInteger\u003e set = new HashSet\u003c\u003e(list); LinkedHashSet 是有序的，顺序就是插入元素时的顺序。 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:4","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Collections ⼯具⽅法集合 emptySet(): 等返回⼀一个⽅方便便的空集合 synchronizedCollection: 将⼀一个集合变成线程安全的 unmodifiableCollection: 将⼀一个集合变成不不可变的（也可以使⽤用Guava的Immutable） ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:1:5","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Map 体系 map 是 一个将 keys 映射到 values 的对象，键不能重复，每个键只能映射一个值，值可以重复。 keySet()返回键的集合，因为键不可重复，所以可以返回一个 set； values()返回值的集合，因为值可以重复，所以返回的是 collection。 注意：keySet()和 map背后的 keys 是同一组数据，所以二者的修改会相互影响。 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:0","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"HashMap HashMap 是最常用、最高效的 Map 实现。 HashMap 的扩容，思路同样是创建更大的空间，然后把之前的数据 copy 进来。 HashMap 是多线程不安全的，可使用 ConcurrentHashMap。 Java 7 开始会采用红黑树代替链表 HashMap 和 HashSet 本质上是同一个东西： HashMap 的 key 集合（set）就是 HashSet，而 HashSet 内部其实就是个 HashMap，毕竟 HashSet 拥有的功能 HashMap 都有。 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:1","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"有序集合TreeSet/TreeMap TreeSet 可以排序（默认是自然顺序）。 HashSet、LinkedHashSet 与 TreeSet 对比： public class Main { public static void main(String[] args) { List\u003cInteger\u003e list = Arrays.asList(1000, -13, 0, -41656, 1250, 555); Set set1 = new HashSet\u003c\u003e(list); Set set2= new LinkedHashSet(list); Set set3 = new TreeSet(list); System.out.println(set1); System.out.println(set2); System.out.println(set3); } } [0, 1250, -41656, 1000, 555, -13] [1000, -13, 0, -41656, 1250, 555] [-41656, -13, 0, 555, 1000, 1250] TreeMap 同理 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:2:2","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Guava 不要重复发明轮⼦子！尽量量使⽤用经过实战检验的类库 Lists/Sets/Maps ImmutableMap/ImmutableSet Multiset/Multimap BiMap!12 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:3:0","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"Collection体系简介图 ","date":"2021-09-11","objectID":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/:4:0","tags":["java"],"title":"Collection体系原理","uri":"https://idpeng.xyz/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/"},{"categories":["java知识"],"content":"jar jar是将很多类文件打包后的一个压缩包,导入 jar 后,可以直接使用里面的类或调用其中的功能。 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:1:0","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"java包的原理 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:2:0","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"传递性依赖 我们依赖的包还依赖了别的类，这种依赖是具有传递性的。 传递性依赖带来的最大的问题就是： 我们在 -classpath 后会添加项目依赖的各种各样的 jar 包； 如果两个仅仅不同版本的 jar 包被同时写进了 -classpath 参数里面； JVM 在 classpath 中寻找类文件的顺序是从前找到后的，也就是说如果有两个仅仅不同版本的 jar ：demo-1.0.jar 和 demo-2.0.jar ，哪个放在前面哪个就会被使用。 如果 demo-1.0.jar 的顺序在 demo-2.0.jar 之前，就会使用demo-1.0.jar加载的类文件，这样的话高版本的jar就会不生效。 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:2:1","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"maven包的管理 Maven 是一个项目管理工具它包含： 一个项目对象模型 一组标准集合 一个项目生命周期 一个依赖管理系统 用来运行定义在生命周期阶段中插件目标的逻辑 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:3:0","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"maven怎么进行管理 Maven 包管理的做法是：Convention over configuration（约定优于配置原则），体现在 POM。 POM是 Maven 工程的基本工作单元，是一个 XML 文件。 该文件中包含了项目的基本信息，用于描述项目如何构建，声明项目依赖等等。 pom.xml \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003ehcsp\u003c/groupId\u003e \u003cartifactId\u003efix-bug-in-integer-equals\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cproperties\u003e \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003c/properties\u003e \u003cprofiles\u003e \u003cprofile\u003e \u003cid\u003ealiyunMavenMirror\u003c/id\u003e \u003cactivation\u003e \u003cactiveByDefault\u003etrue\u003c/activeByDefault\u003e \u003c/activation\u003e \u003cpluginRepositories\u003e \u003cpluginRepository\u003e \u003cid\u003ealimaven\u003c/id\u003e \u003cname\u003ealiyun maven\u003c/name\u003e \u003curl\u003ehttp://maven.aliyun.com/nexus/content/groups/public/\u003c/url\u003e \u003c/pluginRepository\u003e \u003c/pluginRepositories\u003e \u003crepositories\u003e \u003crepository\u003e \u003cid\u003ealimaven\u003c/id\u003e \u003cname\u003ealiyun maven\u003c/name\u003e \u003curl\u003ehttp://maven.aliyun.com/nexus/content/groups/public/\u003c/url\u003e \u003c/repository\u003e \u003c/repositories\u003e \u003c/profile\u003e \u003cprofile\u003e \u003cid\u003emavenCentral\u003c/id\u003e \u003cpluginRepositories\u003e \u003cpluginRepository\u003e \u003cid\u003emavenCentral\u003c/id\u003e \u003cname\u003emavenCentral\u003c/name\u003e \u003curl\u003ehttps://repo.maven.apache.org/maven2\u003c/url\u003e \u003c/pluginRepository\u003e \u003c/pluginRepositories\u003e \u003crepositories\u003e \u003crepository\u003e \u003cid\u003emavenCentral\u003c/id\u003e \u003cname\u003emavenCentral\u003c/name\u003e \u003curl\u003ehttps://repo.maven.apache.org/maven2\u003c/url\u003e \u003c/repository\u003e \u003c/repositories\u003e \u003c/profile\u003e \u003c/profiles\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e \u003cversion\u003e2.22.1\u003c/version\u003e \u003cconfiguration\u003e \u003cargLine\u003e-Dfile.encoding=UTF-8\u003c/argLine\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c/project\u003e 引入第三方包 \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e 里面加入了junit-jupiter-engine的jar 如果在本地仓库没有找到对应的 jar 包，Maven 就会从远程的中央仓库进行下载，然后放到本地仓库中。 Maven 中央仓库位置 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:3:1","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"包冲突及解决办法 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:4:0","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"包冲突 相比于C1来说，C2这个第三方包离项目更接近，因此Maven会自动帮你把C1去除，而保留C2。 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:4:1","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"解决冲突的办法 直接依赖C2 排除C1 通过Maven helper插件来解决包冲突问题 排除 \u003cdependency\u003e \u003cgroupId\u003exxx\u003c/groupId\u003e \u003cartifactId\u003exxx\u003c/artifactId\u003e \u003cversion\u003e1.0.0\u003c/version\u003e \u003cexclusions\u003e \u003cexclusion\u003e \u003cgroupId\u003eyyy\u003c/groupId\u003e \u003cartifactId\u003eyyy\u003c/artifactId\u003e \u003c/exclusion\u003e \u003c/exclusions\u003e \u003c/dependency\u003e 排除了xxx依赖中的后代yyy依赖，也可以解决包冲突的问题 ","date":"2021-09-09","objectID":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/:4:2","tags":["java"],"title":"Maven与包","uri":"https://idpeng.xyz/maven%E4%B8%8E%E5%8C%85/"},{"categories":["java知识"],"content":"git系列操作 ","date":"2021-09-09","objectID":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:0:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"git六行配置 git config --global user.name 你的英文名 git config --global user.email 你的邮箱 git config --global push.default simple git config --global core.quotepath false git config --global core.editor \"code --wait\" git config --global core.autocrlf input 注意： 上面的英文名和邮箱跟 GitHub 没有关系。 可以跟 GitHub 的用户名和邮箱保持一致，也可以不一致。 ","date":"2021-09-09","objectID":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:1:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"新建代码库 # 在当前目录新建一个 Git 代码库 git init # 新建一个目录，将其初始化为 Git 代码库 git init [project-name] # 下载一个项目和它的整个代码历史 git clone [url] ","date":"2021-09-09","objectID":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:2:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"配置文件 # 显示当前的 Git 配置 git config --list # 编辑 Git 配置文件 git config -e [--global] ","date":"2021-09-09","objectID":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:3:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"增加/删除文件 # 添加指定文件到暂存区 git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 git add [dir] # 添加当前目录的所有文件到暂存区 git add . # 删除工作区文件，并且将这次删除放入暂存区 git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 git rm --cached [file] # 改名文件，并且将这个改名放入暂存区 git mv [file-original] [file-renamed] 代码提交 # 提交暂存区到仓库区 git commit -m [message] # 提交暂存区的指定文件到仓库区 git commit [file1] [file2] ... -m [message] # 提交工作区自上次 commit 之后的变化，直接到仓库区 git commit -a # 提交时显示所有 diff 信息(推荐) git commit -v # 使用一次新的 commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息 git commit --amend -m [message] # 重做上一次 commit，并包括指定文件的新变化 git commit --amend ... ","date":"2021-09-09","objectID":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:4:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"分支 # 列出所有本地分支 git branch # 列出所有远程分支 git branch -r # 列出所有本地分支和远程分支 git branch -a # 新建一个分支，但依然停留在当前分支 git branch [branch-name] # 新建一个分支，并切换到该分支 git checkout -b [branch] # 新建一个分支，指向指定 commit git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 git checkout [branch-name] # 建立追踪关系，在现有分支与指定的远程分支之间 git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 git merge [branch] # 选择一个 commit，合并进当前分支 git cherry-pick [commit] # 删除分支 git branch -d [branch-name] # 删除远程分支 git push origin --delete git branch -dr ","date":"2021-09-09","objectID":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:5:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"提交代码 git pull 提交代码到远程仓库 git push -u origin master 提交本地指定分支master代码到远程仓库 ","date":"2021-09-09","objectID":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/:6:0","tags":["java"],"title":"Git本地仓库与远程仓库","uri":"https://idpeng.xyz/git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"},{"categories":["java知识"],"content":"ls命令 list 的缩写,可以查看文件权限(包括目录、文件夹、文件权限),查看目录信息。 ls -a 列出目录所有文件，包含以.开始的隐藏文件 ls -A 列出除.及..的其它文件 ls -r 反序排列 ls -t 以文件修改时间排序 ls -S 以文件大小排序 ls -h 以易读大小显示 ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:1:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"cd命令 cd [目录名] 进入目录 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"pwd命令 pwd 查看当前路径 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"mkdik命令 mkdir t 在当前工作目录下创建名为 t的文件夹 mkdir -p /tmp/test/t1/t 在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:4:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"rm命令 rm -i *.log 删除任何 .log 文件，删除前逐一询问确认 rm -rf test 删除 test 子目录及子目录中所有档案删除，并且不用一一确认 rm -- -f* 删除以 -f 开头的文件 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:5:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"mv命令 mv test.log test1.txt 将文件 test.log 重命名为 test1.txt mv llog1.txt log2.txt log3.txt /test3 将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 mv -i log1.txt log2.txt 将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 mv * ../ 移动当前文件夹下的所有文件到上一级目录 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:6:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"cp命令 -i 提示 -r 复制目录及目录内所有项目 -a 复制的文件与原文件时间一样 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:7:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"cat命令 cat filename 一次显示整个文件 cat \u003e filename 从键盘创建一个文件 cat file1 file2 \u003e file 将几个文件合并为一个文件 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:8:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"more 命令 功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:9:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"命令参数： +n 从笫 n 行开始显示 -n 定义屏幕大小为n行 +/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示 -d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能 -l 忽略Ctrl+l（换页）字符 -p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似 -s 把连续的多个空行显示为一行 -u 把文件内容中的下画线去掉 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:9:1","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"常用操作命令 Enter 向下 n 行，需要定义。默认为 1 行 Ctrl+F 向下滚动一屏 空格键 向下滚动一屏 Ctrl+B 返回上一屏 = 输出当前行的行号 :f 输出文件名和当前行的行号 V 调用vi编辑器 !命令 调用Shell，并执行命令 q 退出more ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:9:2","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"categories":["java知识"],"content":"which 命令 which 查看可执行文件的位置。 whereis 查看文件的位置。 locate 配合数据库查看文件位置。 find 实际搜寻硬盘查询文件名称。 ","date":"2021-09-09","objectID":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:10:0","tags":["java"],"title":"Linux常用命令行","uri":"https://idpeng.xyz/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}]